<template>
  <view>
    <cc-header title="{{type === 'product' ? '产品' : '新闻'}}分类" back="{{!selected}}">
      <view bindtap="toggleAll" wx:if="{{selected}}" style="width:100%">
        <text wx:if="{{!toggle}}">全选</text>
        <text wx:if="{{toggle}}">全不选</text>
      </view>
    </cc-header>
    <!-- head -->
    <cc-lan lan="{{true}}" bindchange="get"></cc-lan>

    <ui-row-list class="category-list">
      <ui-row height="102r" border-bottom wx:for="{{list}}" wx:key="*this" wx:if="{{!item.hidden}}">
        <ui-col vertical-align="middle" align="center" width="123r" data-index="{{index}}" bindtap="toggle">
          <icon type="circle" size="18" wx:if="{{!item._checked}}"></icon>
          <icon type="success" size="18" wx:if="{{item._checked}}"></icon>
        </ui-col>
        <ui-col class="text {{item.categoryId === categoryId ? 'active' : ''}}" vertical-align="middle" space-left="{{item.grade === '2' ? '25' : item.grade === '3' ? '50' : ''}}" data-item="{{item}}" bindtap="item">
          <view  wx:if="{{!item.editing}}">{{item.name}}</view>
          <input bindinput="input" data-index="{{index}}" value="{{item.name}}" wx:if="{{item.editing}}"/>
        </ui-col>
        <ui-col width="40" vertical-align="middle" align="center" wx:if="{{item.editing}}" data-item="{{item}}" catchtap="nameChange">
          <i class="iconfont icon-gou"></i>
        </ui-col>
        <ui-col vertical-align="middle" align="right" width="40" space-right="15">
          <i class="iconfont icon-jianquminus25" wx:if="{{item.isroot && item.expand}}" data-item="{{item}}" bindtap="changeCateList"></i>
          <i class="iconfont icon-jia1" wx:if="{{item.isroot && !item.expand}}" data-item="{{item}}" bindtap="changeCateList"></i>
        </ui-col>
      </ui-row>
    </ui-row-list>

    <view class="j_add" bindtap="add"><i class="iconfont icon-jia"></i></view>

    <!-- 尾 -->
    <ui-fixed-view bottom="0" left="{{'0;z-index:700;'}}" right="0" wx:if="{{selected}}">
      <ui-row height="60" border-top class="fixed_btn">
        <ui-col span="3" vertical-align="middle" align="center">
          <cc-category title="{{false}}" type="{{type}}" categoryList="{{list}}" bindchange="batchMove">
            <i class="iconfont icon-folder-add-fill2"></i>
            <view>移动</view>
          </cc-category>
        </ui-col>
        <ui-col span="3" vertical-align="middle" align="center" bindtap="batchDel">
          <i class="iconfont icon-delete-fill"></i>删除
        </ui-col>
        <ui-col span="3" vertical-align="middle" align="center" data-show="{{'1'}}" bindtap="batchDisplay">
          <i class="iconfont icon-yanjing"></i>显示
        </ui-col>
        <ui-col span="3" vertical-align="middle" align="center" data-show="{{ true }}" bindtap="more">
          <i class="iconfont icon-gengduo"></i>更多
        </ui-col>
      </ui-row>
    </ui-fixed-view>
    <view style="height:70px" wx:if="{{selected}}"></view>
    <ui-mask show="{{showMask}}" hide-delay="500">
      <view class="mask_btn">
        <view class="btn">
          <view data-show="{{'0'}}" bindtap="batchDisplay">隐藏</view>
          <view bindtap="rename">重命名</view>
          <view data-show="{{false}}" bindtap="batchHidden">展开</view>
          <view data-show="{{true}}" bindtap="batchHidden">折叠</view>
        </view>
        <button data-show="{{ false }}" bindtap="more">取消</button>
      </view>
    </ui-mask>

    <cc-modal title="添加分类" visible="{{ visible1 }}" bind:ok="ok" bind:cancel="cancel">
      <view class="add-content">
        <i class="iconfont icon-close-circle-fill" bindtap="clearinput" wx:if="{{detail.name}}"></i>
        <input type="text" value="{{detail.name}}" bindinput="nameInput"/>
      </view>
      <view class="add-category">
        <cc-category type="{{type}}" categoryList="{{list}}" bindchange="batchMove2">
          <view style="display:inline-block">上级分类：</view>
        </cc-category>
      </view>
    </cc-modal>
  </view>
</template>

<script>
import api from '../../static/utils/api'
import Tips from '../../static/utils/tips'
import Utils from '../../static/utils/utils'
import regeneratorRuntime from 'regenerator-runtime'
export default {
  config: {
    usingComponents: {
      'cc-header': '../../packages/cc-header',
      'cc-lan': '../../packages/cc-lan',
      'cc-modal': '../../packages/cc-modal',
      'cc-category': '../../packages/cc-category'
    }
  },
  data: {
    title: '分类',
    // 新增文件夹
    visible1: false,
    detail: {},
    // 数据
    list: [],
    type: 'product',
    selected: false, //选中状态
    ids: '', // 选中项
    toggle: false, // 全选切换状态 
    showMask: false // 更多
  },
  onLoad (e) {
    if (e.type) {
      this.setData({
        type: e.type
      })
    }
    this.get()
  },
  get () {
    let that = this
    this.setData({
      ids: ''
    })
    if (this.data.type === 'product') {
      getApp().getProductCategory(res => {
        that.setList(res)
      }) 
    } else {
      getApp().getNewsCategory(res => {
        that.setList(res)
      })
    }
  },
  setList (res) {
    res.forEach((item, index) => {
      item.editing = false
      item.index = index
    })
    this.setData({
      list: res
    }) 
  },
  item (e) {
    let item = e.currentTarget.dataset.item
    if (this.data.selected) {
      this.setData({
        selected: false
      })
    }
  },
  changeCateList (e) {
    let data = e.currentTarget.dataset.item
    data.expand = !data.expand
    // 三角图标expand = false 关闭   hidden = true 隐藏
    var ctx = this
    this.data.list.forEach(item => {
      if (item.categoryId === data.categoryId) {
        item.expand = !item.expand
      }
      if (item.belongId === data.categoryId) {
        item.hidden = !data.expand
        ctx.data.list.forEach(row => {
          if (row.belongId === item.categoryId) {
            if (!data.expand) {
              row.hidden = true
            } else {
              row.hidden = !item.expand
            }
          }
        })
      }
    })
    this.setData({
      list: this.data.list
    })
  },
  // add
  add () {
    this.setData({
      visible1: true
    })
  },
  nameInput (e) {
    this.setData({
      'detail.name': e.detail.value
    })
  },
  clearinput () {
    this.setData({
      'detail.name': ''
    })
  },
  cancel () {
    this.setData({
      visible1: false
    })
  },
  batchMove2 (e) {
    this.setData({
      'detail.belongId': e.detail
    })
  },
  // 添加
  ok () {
    let detail = this.data.detail
    if (this.data.type === 'product') {
      detail.type = '10'
    } else if (this.data.type === 'news') {
      detail.type = '11'
    } else {
      detail.type = '13'
    }
    let data = {
      model: JSON.stringify(detail)
    }
    if (detail.categoryId) {
      data._method = 'put'
    }
    api.categoryDetail({
      data: data,
      id: detail.categoryId,
      method: 'POST'
    }).then(res => {
      if (res.success) {
        Tips.success('添加成功')
        this.cancel()
        this.get()
      } else {
        Tips.error(res.msg)
      }
    })
  },
  // 全选
  toggleAll () {
    let list = this.data.list
    let toggle = !this.data.toggle
    list.forEach(item => {
      item._checked = toggle
    })
    this.setData({
      list: list,
      toggle: toggle
    })
    if (!toggle) {
      this.setData({
        selected: false
      })
    }
    this.initSelcted()
  },
  // 单选
  toggle (e) {
    let index = e.currentTarget.dataset.index
    let field = 'list[' + index + ']._checked'
    this.setData({
      [field]: !this.data.list[index]._checked,
      selected: true
    })
    this.initSelcted ()
  },
  initSelcted () {
    let list = this.data.list
    let ids = ''
    list.forEach(item => {
      if (item._checked) {
        ids = ids ? (ids + ',' + item.categoryId) : item.categoryId
      }
    })
    this.setData({
      ids: ids
    })
  },
  // 批量
  batchMove (e) {
    Utils.batchMove(this, 'category' + this.data.type, e.detail)
  },
  async batchDel () {
    if (!this.data.ids) {
      return Tips.toast('未选择')
    }
    await Tips.confirm('确认删除吗？')
    api.categoryDel({
      data: {categoryIds: this.data.ids},
      method: 'post'
    }).then(res => {
      if (res.success) {
        Tips.success('删除成功')
        this.setData({
          selected: false
        })
        this.get()
      } else {
        Tips.error(res.msg)
      }
    })
  },
  batchDisplay (e) {
    if (!this.data.ids) {
      return Tips.toast('未选择')
    }
    let display = e.currentTarget.dataset.show
    api.categoryDisplay({
      data: {
        categoryIds: this.data.ids,
        isdisplay: display
      },
      method: 'post'
    }).then(res => {
      if (res.success) {
        Tips.success(display === '1' ? '显示成功' : '隐藏成功')
        this.setData({
          selected: false
        })
        this.get()
      } else {
        Tips.error(res.msg)
      }
    })
  },
  batchHidden (e) {
    let bool = e.currentTarget.dataset.show
    this.data.list.forEach(item => {
      if (item.grade !== '1') {
        item.hidden = bool
      }
      item.expand = !bool
    })
    this.setData({
      list: this.data.list
    })
  },
  rename (e) {
    if (!this.data.ids) {
      return Tips.toast('未选择')
    }
    let ids = this.data.ids.split(',')
    this.data.list.forEach(item => {
      ids.forEach(id => {
        if (id === item.categoryId) item.editing = true
      })
    })
    this.setData({
      list: this.data.list
    })
  },
  input (e) {
    let index = e.currentTarget.dataset.index
    var obj ='list['+index+'].name'
    this.setData({
      [obj]: e.detail.value
    })
  },
  nameChange (e) {
    let item = e.currentTarget.dataset.item
    let data = {
      model: JSON.stringify({
        id: item.categoryId,
        name: item.name
      }),
      _method: 'put'
    }
    api.categoryDetail({
      data: data,
      id: item.categoryId,
      method: 'POST'
    }).then(res => {
      if (res.success) {
        Tips.success('保存成功')
        var obj ='list['+item.index+']'
        item.editing = false
        this.setData({
          [obj]: item
        })
      } else {
        Tips.error(res.msg)
      }
    })
  },
  more (e) {
    let show = e.currentTarget.dataset.show
    this.setData({
      showMask: show
    })
  }
}
</script>

<style lang="less">
.ui-row-list > .ui-row:not(:last-child):after {
  left: 123rpx;
}
.category-list{
  .iconfont{
    color: #cfcdd1;
  }
  .active{
    color:#00c0e4;
  }
  .text{
    color: #4e4e4e;
  }
  input{
    height: 64rpx;
    line-height: 64rpx;
    padding:0 15px;
    color:#060407
  }
  .icon-gou{
    color: #4c4c4c
  }
}

.ui-col.active{
  color: #09C2B1;
}
.ui-icon{
  display: inline-block;
  transform:rotate(0deg);
  transition: all .3s ease-in;
  &.active{
    transform:rotate(180deg);
    color:#09C2B1!important;
  }
}

.add-content{
  text-align:left;margin:5px 15px;background:#f6f6f6;
  height: 64rpx;
  line-height: 64rpx;    
  position: relative;
  .icon-close-circle-fill{
    width: 64rpx;
    height: 64rpx;
    line-height: 64rpx;
    font-size: 16px;
    text-align: center;
    color: #b5b3b6;
    position: absolute;
    right: 0;
    z-index: 3;
  }
  input{
    height: 64rpx;
    line-height: 64rpx;
    padding:0 15px;
    color:#060407
  }
  .icon-gou{
    color: #4c4c4c
  }
}
</style>
