<template>
  <view style="width:100%">
    <view bindtap="openPopup">{{val}}</view>
    <view style="height: 270px;" class="ui-popup {{ show ? 'show' : '' }}">
      <view class="ui-popup-content bottom {{ show ? 'show' : '' }}">
        <ui-row height="45" border-bottom>
          <ui-col class="text" vertical-align="middle" align="left" space-left="15" bindtap="popHide">
            取消
          </ui-col>
          <ui-col width="100" vertical-align="middle" align="right" space-right="15" bindtap="submit">
            <view class="view" style="color:#12bedb">确定</view>
          </ui-col>
        </ui-row>
        <picker-view indicator-style="height: 50px;" style="width: 100%; height: 220px;" value="{{time}}" bindchange="bindChange">
          <picker-view-column>
            <view wx:for="{{years}}" wx:key="*this">{{item}}年</view>
          </picker-view-column>
          <picker-view-column>
            <view wx:for="{{months}}" wx:key="*this">{{item}}月</view>
          </picker-view-column>
          <picker-view-column>
            <view wx:for="{{days}}" wx:key="*this">{{item}}日</view>
          </picker-view-column>
          <picker-view-column>
            <view wx:for="{{hours}}" wx:key="*this">{{item}}时</view>
          </picker-view-column>
          <picker-view-column>
            <view wx:for="{{minutes}}" wx:key="*this"><text wx:if="{{item<10}}">0</text>{{item}}分</view>
          </picker-view-column>
          <picker-view-column>
            <view wx:for="{{seconds}}" wx:key="*this"><text wx:if="{{item<10}}">0</text>{{item}}秒</view>
          </picker-view-column>
        </picker-view>
      </view>
      <view style="bottom: 0px;" class="ui-popup-mask {{ show ? 'show' : '' }}" bindtap="popHide"></view>
    </view>
  </view>
</template>

<script>
const date = new Date()
const years = []
const months = []
const days = []
const hours = []
const minutes = []
const seconds = []
for (let i = 1990; i <= date.getFullYear() + 10; i++) {
  years.push(i)
}
for (let i = 1 ; i <= 12; i++) {
  months.push(i)
}
for (let i = 1 ; i <= 31; i++) {
  days.push(i)
}
for (let i = 0 ; i < 24; i++) {
  hours.push(i)
}
for (let i = 0 ; i < 60; i++) {
  minutes.push(i)
  seconds.push(i)
}
import Utils from '../static/utils/utils'
export default {
  properties: {
    value: {
      type: String,
      value: ""
    }
  },
  data: {
    show: false,
    // 列表
    years: years,
    months: months,
    days: days,
    hours: hours,
    minutes: minutes,
    seconds: seconds,
    // 值
    val: '',
    time: [9999, 1, 1],
  },
  ready () {
    let date = Utils.formatTime(this.data.value || new Date(), 'yyyy-MM-dd-hh-mm-ss').split('-')
    let val = Utils.formatTime(this.data.value || new Date(), 'yyyy-MM-dd hh:mm:ss')
    this.initDay(date[0], date[1])
    let year = 0
    years.forEach((item, index) => {
      if (item === parseInt(date[0])) {
        year = index
      }
    })
    this.setData({
      time: [year, date[1]-1, date[2]-1, date[3], date[4], date[5]],
      val: val
    })
    this.triggerEvent('change', val)
  },
  methods: {
    openPopup (e) {
      this.setData({
        show: !this.data.show
      })
    },
    popHide () {
      this.setData({
        show:false
      })
    },
    popShow () {
      this.setData({
        show:true
      })
    },
    initDay (year, month) {
      var d = new Date(year, month, 0).getDate();
      let days = []
      for (let i = 1 ; i <= d; i++) {
        days.push(i)
      }
      this.setData({
        days: days
      })
    },
    bindChange: function(e) {
      const val = e.detail.value
      this.initDay(years[val[0]], val[1]+1)
      this.setData({
        time: val
      })
    },
    initTwo (val){
      return val < 10 ? ('0'+val) : val
    },
    submit () {
      let val = this.data.time
      let value = years[val[0]] + '-' + this.initTwo(val[1]+1) + '-' + this.initTwo(val[2]+1) + ' ' +
        this.initTwo(val[3]) + ':' + this.initTwo(val[4]) + ':' + this.initTwo(val[5])
      this.setData({
        val: value
      })
      this.triggerEvent('change', value)
      this.popHide()
    }
  }
}
</script>

<style lang="less">
@import '../static/styles/row';
@import '../static/styles/col';
picker-view{
  view{
    text-align: center;
    line-height: 50px
  }
}

// mask
.ui-popup {
  position: fixed;
  right: 0;
  bottom: 0;
  left: 0;
  width: 100%;
  z-index: 501;
  transition-property: transform, visibility;
  transition-duration: 300ms;
  max-height: 100%;
  overflow-y: scroll;
  -webkit-backface-visibility: hidden;
  visibility: hidden;
}
.ui-popup.show {
  visibility: visible;
}
.ui-popup-content {
  position: absolute;
  background-color: #fff;
}
.ui-popup-content.bottom {
  bottom: 0;
  left: 0;
  width: 100%;
  transition: transform 300ms;
  transform: translate3d(0, 100%, 0);
}
.ui-popup-content.bottom.show {
  transform: translate3d(0, 0, 0);
}
.ui-popup-content.top {
  top: 0;
  left: 0;
  width: 100%;
  animation: slideOut both .3s;
  transform-origin: 50% 0;
}
.ui-popup-content.top.show {
  animation: slideIn both .3s;
  transform-origin: 50% 0;
}
.ui-popup-content.left {
  width: auto;
  height: 100%;
  top: 0;
  right: auto;
  bottom: auto;
  left: 0;
  transition: transform 300ms;
  transform: translate3d(-100%, 0, 0);
}
.ui-popup-content.left.show {
  transform: translate3d(0, 0, 0);
}
.ui-popup-content.right {
  height: 100%;
  top: 0;
  right: 0;
  bottom: auto;
  left: auto;
  transition: transform 300ms;
  transform: translate3d(100%, 0, 0);
}
.ui-popup-content.right.show {
  transform: translate3d(0, 0, 0);
}
.ui-popup-mask {
  display: block;
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  opacity: 0;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  z-index: -1;
  transition: opacity 400ms;
}
.ui-popup-mask.show {
  opacity: 1;
}
.ui-popup-animate-top-enter-active {
  animation: slideIn both .3s;
  transform-origin: 50% 0;
}
.ui-popup-animate-top-leave-active {
  animation: slideOut both .3s;
  transform-origin: 50% 0;
}
@keyframes slideIn {
  0% {
    opacity: 0;
    transform: scaleY(0);
  }
  100% {
    opacity: 1;
    transform: scaleY(1);
  }
}
@keyframes slideOut {
  0% {
    opacity: 1;
    -webkit-transform: scaleY(1);
    transform: scaleY(1);
  }
  100% {
    opacity: 0;
    -webkit-transform: scaleY(0);
    transform: scaleY(0);
  }
}

</style>

