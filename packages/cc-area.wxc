<template>
  <view style="width:100%">
    <view bindtap="openPopup">{{text}}</view>
    <view style="height: 270px;" class="ui-popup {{ show ? 'show' : '' }}">
      <view class="ui-popup-content bottom {{ show ? 'show' : '' }}">
        <ui-row height="45" border-bottom>
          <ui-col class="text" vertical-align="middle" align="left" space-left="15" bindtap="popHide">
            取消
          </ui-col>
          <ui-col width="100" vertical-align="middle" align="right" space-right="15" bindtap="submit">
            <view class="view" style="color:#12bedb">确定</view>
          </ui-col>
        </ui-row>
        <picker-view indicator-style="height: 50px;" style="width: 100%; height: 220px;" value="{{val}}" bindchange="bindChange">
          <picker-view-column>
            <view wx:for="{{province}}" wx:key="{{index}}">{{item.text}}</view>
          </picker-view-column>
          <picker-view-column>
            <view wx:for="{{city}}" wx:key="{{index}}">{{item.text}}</view>
          </picker-view-column>
          <picker-view-column>
            <view wx:for="{{area}}" wx:key="{{index}}">{{item.text}}</view>
          </picker-view-column>
        </picker-view>
      </view>
      <view style="bottom: 0px;" class="ui-popup-mask {{ show ? 'show' : '' }}" bindtap="popHide"></view>
    </view>
  </view>
</template>

<script>
import Utils from '../static/utils/utils'
import api from '../static/utils/api'
export default {
  properties: {
    path: {
      type: String,
      value: ""
    }
  },
  data: {
    show: false,
    // 列表
    province: [],
    city: [],
    area: [],
    // 值
    text: '',
    val: [0, 0, 0],
    list: []
  },
  ready () {
    this.get()
  },
  methods: {
    get () {
      api.area().then(res => {
        let data = res.attributes.data
        let province = []
        data.forEach(item => {
          if (item.level === 0) {
            province.push({
              value: item.areaId,
              text: item.name
            })
          }
        })
        this.setData({
          list: res.attributes.data,
          province: province
        })
        this.init()
      })
    },
    init () {
      let ids = this.data.path.split(',')
      let id1 = ids[0]
      let id2 = ids[1]
      let id3 = ids[2]
      let val = this.data.val
      let text = ''
      if (id1) {
        this.eachList(id1, 2)
        this.data.province.forEach((item, index) => {
          if (id1 === item.value) {
            val[0] = index
            text = item.text
            this.setData({
              val: val
            })
          }
        })
      }
      if (id2) {
        this.eachList(id2, 3)
        this.data.city.forEach((item, index) => {
          if (id2 === item.value) {
            val[1] = index
            text += item.text
            this.setData({
              val: val
            })
          }
        })
      }
      if (id3) {
        this.data.area.forEach((item, index) => {
          if (id3 === item.value) {
            val[2] = index
            text += item.text
            this.setData({
              val: val
            })
          }
        })
      }
      this.setData({
        text: text
      })
    },
    eachList (id, number) {
      let data = []
      this.data.list.forEach(item => {
        if (item.belongId === id) {
          data.push({
            value: item.areaId,
            text: item.name
          })
        }
      })
      if (number === 2) {
        this.setData({
          city: data
        })
      }
      if (number === 3) {
        this.setData({
          area: data
        })
      }
    },
    bindChange: function(e) {
      const val = e.detail.value
      this.eachList(this.data.province[val[0]].value, 2)
      this.eachList(this.data.city[val[1]].value, 3)
      let area = this.data.area
      let text = this.data.province[val[0]].text
        + this.data.city[val[1]].text
        + (area.length > 0 ? area[val[2]].text : '')
      this.setData({
        val: val,
        text: text
      })
    },
    submit () {
      let val = this.data.val
      let area = this.data.area
      let path = this.data.province[val[0]].value
        + ',' + this.data.city[val[1]].value
        + (area.length > 0 ? ',' + area[val[2]].value : '')
      this.triggerEvent('change', path)
      this.popHide()
    },
    openPopup (e) {
      this.setData({
        show: !this.data.show
      })
    },
    popHide () {
      this.setData({
        show:false
      })
    },
    popShow () {
      this.setData({
        show:true
      })
    }
  }
}
</script>

<style lang="less">
@import '../static/styles/row';
@import '../static/styles/col';
picker-view{
  view{
    text-align: center;
    line-height: 50px
  }
}

// mask
.ui-popup {
  position: fixed;
  right: 0;
  bottom: 0;
  left: 0;
  width: 100%;
  z-index: 501;
  transition-property: transform, visibility;
  transition-duration: 300ms;
  max-height: 100%;
  overflow-y: scroll;
  -webkit-backface-visibility: hidden;
  visibility: hidden;
}
.ui-popup.show {
  visibility: visible;
}
.ui-popup-content {
  position: absolute;
  background-color: #fff;
}
.ui-popup-content.bottom {
  bottom: 0;
  left: 0;
  width: 100%;
  transition: transform 300ms;
  transform: translate3d(0, 100%, 0);
}
.ui-popup-content.bottom.show {
  transform: translate3d(0, 0, 0);
}
.ui-popup-content.top {
  top: 0;
  left: 0;
  width: 100%;
  animation: slideOut both .3s;
  transform-origin: 50% 0;
}
.ui-popup-content.top.show {
  animation: slideIn both .3s;
  transform-origin: 50% 0;
}
.ui-popup-content.left {
  width: auto;
  height: 100%;
  top: 0;
  right: auto;
  bottom: auto;
  left: 0;
  transition: transform 300ms;
  transform: translate3d(-100%, 0, 0);
}
.ui-popup-content.left.show {
  transform: translate3d(0, 0, 0);
}
.ui-popup-content.right {
  height: 100%;
  top: 0;
  right: 0;
  bottom: auto;
  left: auto;
  transition: transform 300ms;
  transform: translate3d(100%, 0, 0);
}
.ui-popup-content.right.show {
  transform: translate3d(0, 0, 0);
}
.ui-popup-mask {
  display: block;
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  opacity: 0;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  z-index: -1;
  transition: opacity 400ms;
}
.ui-popup-mask.show {
  opacity: 1;
}
.ui-popup-animate-top-enter-active {
  animation: slideIn both .3s;
  transform-origin: 50% 0;
}
.ui-popup-animate-top-leave-active {
  animation: slideOut both .3s;
  transform-origin: 50% 0;
}
@keyframes slideIn {
  0% {
    opacity: 0;
    transform: scaleY(0);
  }
  100% {
    opacity: 1;
    transform: scaleY(1);
  }
}
@keyframes slideOut {
  0% {
    opacity: 1;
    -webkit-transform: scaleY(1);
    transform: scaleY(1);
  }
  100% {
    opacity: 0;
    -webkit-transform: scaleY(0);
    transform: scaleY(0);
  }
}

</style>
